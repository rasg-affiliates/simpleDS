name: Run Tests
on: [push, pull_request]

jobs:
  flake8:
    name: Flake8
    runs-on: ubuntu-latest
    env:
      ENV_NAME: linting
      WITH_SUDO: yes
      PYTHON: 3.7
    steps:
     - uses: actions/checkout@master
       with:
         fetch-depth: 1

     - name: Get Miniconda Linux
       run: |
         wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/miniconda.sh;
         bash $HOME/miniconda.sh -b -p $HOME/miniconda

     - name: Setup Environment
       run: |
         export PATH="$HOME/miniconda/bin:$PATH"
         ./ci/install_conda.sh

     - name: Linting
       run: |
         export PATH="$HOME/miniconda/bin:$PATH"
         source activate $ENV_NAME
         flake8

  tests:
    env:
      ENV_NAME: tests
      PYTHON: ${{ matrix.python-version }}
      WITH_SUDO: yes
      OS: ${{ matrix.os }}
    name: Testing
    needs: [flake8]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [2.7, 3.6, 3.7, 3.8]
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 1

      - name: Get Miniconda MacOSX
        if: matrix.os == 'macos-latest'
        run: |
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $HOME/miniconda.sh;
          bash $HOME/miniconda.sh -b -p $HOME/miniconda

      - name: Get Miniconda Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/miniconda.sh;
          bash $HOME/miniconda.sh -b -p $HOME/miniconda

      - name: Setup Environment
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          ./ci/install_conda.sh

      - name: Install
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          source activate ${ENV_NAME}
          pip install -e .[all]

      - name: Run Tests
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          source activate $ENV_NAME
          python -m pytest -v --cov=simpleDS --cov-config=.coveragerc --cov-report xml:./coverage.xml --junitxml=test-reports/xunit.xml

      - uses: codecov/codecov-action@master
        if: matrix.os == 'ubuntu-latest' && success()
        with:
          token: ${{secrets.CODECOV_TOKEN}} #required
          file: ./coverage.xml #optional

  notebook:
    name: Tutorial Notebook

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7]

    needs: [tests]

    env:
      ENV_NAME: tutorial
      WITH_SUDO: yes
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}
    steps:
     - uses: actions/checkout@master
       with:
         fetch-depth: 1

     - name: Get Miniconda MacOSX
       if: matrix.os == 'macos-latest'
       run: |
         wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $HOME/miniconda.sh;
         bash $HOME/miniconda.sh -b -p $HOME/miniconda

     - name: Get Miniconda Linux
       if: matrix.os == 'ubuntu-latest'
       run: |
         wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/miniconda.sh;
         bash $HOME/miniconda.sh -b -p $HOME/miniconda

     - name: Setup Environment
       run: |
         export PATH="$HOME/miniconda/bin:$PATH"
         ./ci/install_conda.sh

     - name: Install
       run: |
         export PATH="$HOME/miniconda/bin:$PATH"
         source activate ${ENV_NAME}
         pip install -e .[all]

     - name: Run Tests
       run: |
         export PATH="$HOME/miniconda/bin:$PATH"
         source activate $ENV_NAME
         python -m pytest --nbval --current-env docs/examples/simpleDS_tutorial.ipynb
